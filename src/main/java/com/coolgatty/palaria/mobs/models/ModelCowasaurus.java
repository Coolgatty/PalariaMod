package com.coolgatty.palaria.mobs.models;

import org.lwjgl.opengl.GL11;

import com.coolgatty.palaria.mobs.EntityCowasaurus;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLiving;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.boss.EntityDragon;
import net.minecraft.entity.passive.EntityOcelot;
import net.minecraft.util.MathHelper;

public class ModelCowasaurus extends ModelBase
{
  //fields
    ModelRenderer body;
    ModelRenderer rightfoot1;
    ModelRenderer rightfoot2;
    ModelRenderer rightfoot3;
    ModelRenderer rightfoot4;
    ModelRenderer righttwins;
    ModelRenderer rightquadriceps;
    ModelRenderer lefttwins;
    ModelRenderer leftquadriceps;
    ModelRenderer leftfoot1;
    ModelRenderer leftfoot2;
    ModelRenderer leftfoot3;
    ModelRenderer leftfoot4;
    ModelRenderer bodyneck;
    ModelRenderer neck;
    ModelRenderer tit1;
    ModelRenderer tit2;
    ModelRenderer tit3;
    ModelRenderer tit4;
    ModelRenderer tit5;
    ModelRenderer head;
    ModelRenderer jaw;
    ModelRenderer tooth1;
    ModelRenderer tooth2;
    ModelRenderer tooth3;
    ModelRenderer tooth4;
    ModelRenderer tooth5;
    ModelRenderer tooth6;
    ModelRenderer tooth7;
    ModelRenderer tooth8;
    ModelRenderer tooth9;
    ModelRenderer tooth10;
    ModelRenderer tooth11;
    ModelRenderer tooth12;
    ModelRenderer tooth13;
    ModelRenderer tooth14;
    ModelRenderer tooth15;
    ModelRenderer tooth16;
    ModelRenderer tooth17;
    ModelRenderer tooth18;
    ModelRenderer tooth19;
    ModelRenderer tooth20;
    ModelRenderer horn1;
    ModelRenderer horn2;
    ModelRenderer tail1;
    ModelRenderer tail2;
    ModelRenderer tail3;
    ModelRenderer tail4;
    ModelRenderer leftarm;
    ModelRenderer rightarm;
    ModelRenderer lefthand1;
    ModelRenderer lefthand2;
    ModelRenderer lefthand3;
    ModelRenderer righthand1;
    ModelRenderer righthand2;
    ModelRenderer righthand3;
    ModelRenderer nose1;
    ModelRenderer nose2;
    ModelRenderer rightear1;
    ModelRenderer rightear2;
    ModelRenderer leftear1;
    ModelRenderer leftear2;
    int field_78163_i = 1;
  
  public ModelCowasaurus()
  {
    textureWidth = 256;
    textureHeight = 256;
    
    body = new ModelRenderer(this, 100, 100);
    body.addBox(-6F, -5F, -7F, 11, 14, 15);
    body.setRotationPoint(1F, -3F, 10F);
    body.setTextureSize(256, 256);
    body.mirror = true;
    setRotation(body, 0F, 0F, 0F);
    rightfoot1 = new ModelRenderer(this, 160, 140);
    rightfoot1.addBox(-7F, 14F, -7F, 5, 7, 1);
    rightfoot1.setRotationPoint(-5F, 3F, 9F);
    rightfoot1.setTextureSize(256, 256);
    rightfoot1.mirror = true;
    setRotation(rightfoot1, 0F, 0F, 0F);
    rightfoot2 = new ModelRenderer(this, 160, 120);
    rightfoot2.addBox(-2F, 15F, -7F, 1, 6, 6);
    rightfoot2.setRotationPoint(-5F, 3F, 9F);
    rightfoot2.setTextureSize(256, 256);
    rightfoot2.mirror = true;
    setRotation(rightfoot2, 0F, 0F, 0F);
    rightfoot3 = new ModelRenderer(this, 181, 121);
    rightfoot3.addBox(-7F, 15F, -6F, 1, 6, 5);
    rightfoot3.setRotationPoint(-5F, 3F, 9F);
    rightfoot3.setTextureSize(256, 256);
    rightfoot3.mirror = true;
    setRotation(rightfoot3, 0F, 0F, 0F);
    rightfoot4 = new ModelRenderer(this, 176, 140);
    rightfoot4.addBox(-7F, 14F, -7F, 6, 1, 6);
    rightfoot4.setRotationPoint(-5F, 3F, 9F);
    rightfoot4.setTextureSize(256, 256);
    rightfoot4.mirror = true;
    setRotation(rightfoot4, 0F, 0F, 0F);
    righttwins = new ModelRenderer(this, 160, 100);
    righttwins.addBox(-6.5F, 5F, -5F, 5, 9, 5);
    righttwins.setRotationPoint(-5F, 3F, 9F);
    righttwins.setTextureSize(256, 256);
    righttwins.mirror = true;
    setRotation(righttwins, 0.122173F, 0F, 0F);
    rightquadriceps = new ModelRenderer(this, 160, 70);
    rightquadriceps.addBox(-8F, -1F, -8F, 8, 7, 11);
    rightquadriceps.setRotationPoint(-5F, 3F, 9F);
    rightquadriceps.setTextureSize(256, 256);
    rightquadriceps.mirror = true;
    setRotation(rightquadriceps, 0.122173F, 0F, 0F);
    lefttwins = new ModelRenderer(this, 70, 100);
    lefttwins.addBox(1.5F, 6F, -5F, 5, 9, 5);
    lefttwins.setRotationPoint(6F, 3F, 9F);
    lefttwins.setTextureSize(256, 256);
    lefttwins.mirror = true;
    setRotation(lefttwins, 0.122173F, 0F, 0F);
    leftquadriceps = new ModelRenderer(this, 60, 70);
    leftquadriceps.addBox(0F, -1F, -8F, 8, 7, 11);
    leftquadriceps.setRotationPoint(6F, 3F, 9F);
    leftquadriceps.setTextureSize(256, 256);
    leftquadriceps.mirror = true;
    setRotation(leftquadriceps, 0.122173F, 0F, 0F);
    leftfoot1 = new ModelRenderer(this, 80, 140);
    leftfoot1.addBox(2F, 15F, -7F, 5, 6, 1);
    leftfoot1.setRotationPoint(6F, 3F, 9F);
    leftfoot1.setTextureSize(256, 256);
    leftfoot1.mirror = true;
    setRotation(leftfoot1, 0F, 0F, 0F);
    leftfoot2 = new ModelRenderer(this, 78, 120);
    leftfoot2.addBox(1F, 14F, -7F, 1, 7, 6);
    leftfoot2.setRotationPoint(6F, 3F, 9F);
    leftfoot2.setTextureSize(256, 256);
    leftfoot2.mirror = true;
    setRotation(leftfoot2, 0F, 0F, 0F);
    leftfoot3 = new ModelRenderer(this, 57, 120);
    leftfoot3.addBox(6F, 15F, -6F, 1, 6, 5);
    leftfoot3.setRotationPoint(6F, 3F, 9F);
    leftfoot3.setTextureSize(256, 256);
    leftfoot3.mirror = true;
    setRotation(leftfoot3, 0F, 0F, 0F);
    leftfoot4 = new ModelRenderer(this, 52, 141);
    leftfoot4.addBox(2F, 14F, -7F, 5, 1, 6);
    leftfoot4.setRotationPoint(6F, 3F, 9F);
    leftfoot4.setTextureSize(256, 256);
    leftfoot4.mirror = true;
    setRotation(leftfoot4, 0F, 0F, 0F);
    bodyneck = new ModelRenderer(this, 103, 70);
    bodyneck.addBox(-5F, -5F, -12F, 11, 10, 14);
    bodyneck.setRotationPoint(0F, -4F, 3F);
    bodyneck.setTextureSize(256, 256);
    bodyneck.mirror = true;
    setRotation(bodyneck, 0F, 0F, 0F);
    neck = new ModelRenderer(this, 110, 53);
    neck.addBox(-4F, -3.7F, -6F, 9, 8, 6);
    neck.setRotationPoint(0F, -5F, -9F);
    neck.setTextureSize(256, 256);
    neck.mirror = true;
    setRotation(neck, 0F, 0F, 0F);
    tit1 = new ModelRenderer(this, 110, 136);
    tit1.addBox(0F, 0F, 0F, 7, 2, 8);
    tit1.setRotationPoint(-3F, 6F, 8F);
    tit1.setTextureSize(256, 256);
    tit1.mirror = true;
    setRotation(tit1, 0F, 0F, 0F);
    tit2 = new ModelRenderer(this, 110, 150);
    tit2.addBox(0F, 0F, 0F, 2, 2, 2);
    tit2.setRotationPoint(1.5F, 8F, 9F);
    tit2.setTextureSize(256, 256);
    tit2.mirror = true;
    setRotation(tit2, 0F, 0F, 0F);
    tit3 = new ModelRenderer(this, 130, 150);
    tit3.addBox(0F, 0F, 0F, 2, 2, 2);
    tit3.setRotationPoint(-2.5F, 8F, 9F);
    tit3.setTextureSize(256, 256);
    tit3.mirror = true;
    setRotation(tit3, 0F, 0F, 0F);
    tit4 = new ModelRenderer(this, 130, 160);
    tit4.addBox(0F, 0F, 0F, 2, 2, 2);
    tit4.setRotationPoint(1.5F, 8F, 13F);
    tit4.setTextureSize(256, 256);
    tit4.mirror = true;
    setRotation(tit4, 0F, 0F, 0F);
    tit5 = new ModelRenderer(this, 110, 160);
    tit5.addBox(0F, 0F, 0F, 2, 2, 2);
    tit5.setRotationPoint(-2.5F, 8F, 13F);
    tit5.setTextureSize(256, 256);
    tit5.mirror = true;
    setRotation(tit5, 0F, 0F, 0F);
    head = new ModelRenderer(this, 103, 25);
    head.addBox(-5F, -6F, -16F, 11, 10, 16);
    head.setRotationPoint(0F, -6F, -15F);
    head.setTextureSize(256, 256);
    head.mirror = true;
    setRotation(head, 0F, 0F, 0F);
    jaw = new ModelRenderer(this, 106, 5);
    jaw.addBox(-4F, 0F, -14F, 9, 3, 14);
    jaw.setRotationPoint(0F, -2F, -15F);
    jaw.setTextureSize(256, 256);
    jaw.mirror = true;
    setRotation(jaw, 0F, 0F, 0F);
    tooth1 = new ModelRenderer(this, 10, 200);
    tooth1.addBox(1.5F, 4F, -15.8F, 2, 2, 1);
    tooth1.setRotationPoint(0F, -6F, -15F);
    tooth1.setTextureSize(256, 256);
    tooth1.mirror = true;
    setRotation(tooth1, 0F, 0F, 0F);
    tooth2 = new ModelRenderer(this, 10, 200);
    tooth2.addBox(-2.5F, 4F, -15.8F, 2, 2, 1);
    tooth2.setRotationPoint(0F, -6F, -15F);
    tooth2.setTextureSize(256, 256);
    tooth2.mirror = true;
    setRotation(tooth2, 0F, 0F, 0F);
    tooth3 = new ModelRenderer(this, 10, 200);
    tooth3.addBox(-4.8F, 4F, -15F, 1, 2, 2);
    tooth3.setRotationPoint(0F, -6F, -15F);
    tooth3.setTextureSize(256, 256);
    tooth3.mirror = true;
    setRotation(tooth3, 0F, 0F, 0F);
    tooth4 = new ModelRenderer(this, 10, 200);
    tooth4.addBox(-4.8F, 4F, -11F, 1, 2, 1);
    tooth4.setRotationPoint(0F, -6F, -15F);
    tooth4.setTextureSize(256, 256);
    tooth4.mirror = true;
    setRotation(tooth4, 0F, 0F, 0F);
    tooth5 = new ModelRenderer(this, 10, 200);
    tooth5.addBox(-4.8F, 3.5F, -8F, 1, 2, 1);
    tooth5.setRotationPoint(0F, -6F, -15F);
    tooth5.setTextureSize(256, 256);
    tooth5.mirror = true;
    setRotation(tooth5, 0F, 0F, 0F);
    tooth6 = new ModelRenderer(this, 10, 200);
    tooth6.addBox(-4.8F, 4F, -5F, 1, 1, 1);
    tooth6.setRotationPoint(0F, -6F, -15F);
    tooth6.setTextureSize(256, 256);
    tooth6.mirror = true;
    setRotation(tooth6, 0F, 0F, 0F);
    tooth7 = new ModelRenderer(this, 10, 200);
    tooth7.addBox(4.8F, 4F, -15F, 1, 2, 2);
    tooth7.setRotationPoint(0F, -6F, -15F);
    tooth7.setTextureSize(256, 256);
    tooth7.mirror = true;
    setRotation(tooth7, 0F, 0F, 0F);
    tooth8 = new ModelRenderer(this, 10, 200);
    tooth8.addBox(4.8F, 4F, -11F, 1, 2, 1);
    tooth8.setRotationPoint(0F, -6F, -15F);
    tooth8.setTextureSize(256, 256);
    tooth8.mirror = true;
    setRotation(tooth8, 0F, 0F, 0F);
    tooth9 = new ModelRenderer(this, 10, 200);
    tooth9.addBox(4.8F, 3.5F, -8F, 1, 2, 1);
    tooth9.setRotationPoint(0F, -6F, -15F);
    tooth9.setTextureSize(256, 256);
    tooth9.mirror = true;
    setRotation(tooth9, 0F, 0F, 0F);
    tooth10 = new ModelRenderer(this, 10, 200);
    tooth10.addBox(4.8F, 4F, -5F, 1, 1, 1);
    tooth10.setRotationPoint(0F, -6F, -15F);
    tooth10.setTextureSize(256, 256);
    tooth10.mirror = true;
    setRotation(tooth10, 0F, 0F, 0F);
    tooth11 = new ModelRenderer(this, 10, 200);
    tooth11.addBox(-2F, -1.5F, -13F, 2, 2, 1);
    tooth11.setRotationPoint(0F, -2F, -15F);
    tooth11.setTextureSize(256, 256);
    tooth11.mirror = true;
    setRotation(tooth11, 0F, 0F, 0F);
    tooth12 = new ModelRenderer(this, 10, 200);
    tooth12.addBox(1F, -1.5F, -13F, 2, 2, 1);
    tooth12.setRotationPoint(0F, -2F, -15F);
    tooth12.setTextureSize(256, 256);
    tooth12.mirror = true;
    setRotation(tooth12, 0F, 0F, 0F);
    tooth13 = new ModelRenderer(this, 10, 200);
    tooth13.addBox(3F, -1.5F, -11F, 1, 2, 2);
    tooth13.setRotationPoint(0F, -2F, -15F);
    tooth13.setTextureSize(256, 256);
    tooth13.mirror = true;
    setRotation(tooth13, 0F, 0F, 0F);
    tooth14 = new ModelRenderer(this, 10, 200);
    tooth14.addBox(-3F, -1.5F, -11F, 1, 2, 2);
    tooth14.setRotationPoint(0F, -2F, -15F);
    tooth14.setTextureSize(256, 256);
    tooth14.mirror = true;
    setRotation(tooth14, 0F, 0F, 0F);
    tooth15 = new ModelRenderer(this, 10, 200);
    tooth15.addBox(3F, -1.5F, -8F, 1, 2, 1);
    tooth15.setRotationPoint(0F, -2F, -15F);
    tooth15.setTextureSize(256, 256);
    tooth15.mirror = true;
    setRotation(tooth15, 0F, 0F, 0F);
    tooth16 = new ModelRenderer(this, 10, 200);
    tooth16.addBox(-3F, -1.5F, -8F, 1, 2, 1);
    tooth16.setRotationPoint(0F, -2F, -15F);
    tooth16.setTextureSize(256, 256);
    tooth16.mirror = true;
    setRotation(tooth16, 0F, 0F, 0F);
    tooth17 = new ModelRenderer(this, 10, 200);
    tooth17.addBox(-3F, -1F, -6F, 1, 1, 1);
    tooth17.setRotationPoint(0F, -2F, -15F);
    tooth17.setTextureSize(256, 256);
    tooth17.mirror = true;
    setRotation(tooth17, 0F, 0F, 0F);
    tooth18 = new ModelRenderer(this, 10, 200);
    tooth18.addBox(3F, -1F, -6F, 1, 1, 1);
    tooth18.setRotationPoint(0F, -2F, -15F);
    tooth18.setTextureSize(256, 256);
    tooth18.mirror = true;
    setRotation(tooth18, 0F, 0F, 0F);
    tooth19 = new ModelRenderer(this, 10, 200);
    tooth19.addBox(-3F, -0.9F, -4F, 1, 1, 1);
    tooth19.setRotationPoint(0F, -2F, -15F);
    tooth19.setTextureSize(256, 256);
    tooth19.mirror = true;
    setRotation(tooth19, 0F, 0F, 0F);
    tooth20 = new ModelRenderer(this, 10, 200);
    tooth20.addBox(3F, -0.9F, -4F, 1, 1, 1);
    tooth20.setRotationPoint(0F, -2F, -15F);
    tooth20.setTextureSize(256, 256);
    tooth20.mirror = true;
    setRotation(tooth20, 0F, 0F, 0F);
    horn1 = new ModelRenderer(this, 90, 5);
    horn1.addBox(6F, -10F, -1F, 2, 6, 2);
    horn1.setRotationPoint(0F, -6F, -15F);
    horn1.setTextureSize(256, 256);
    horn1.mirror = true;
    setRotation(horn1, 0F, 0F, 0F);
    horn2 = new ModelRenderer(this, 155, 5);
    horn2.addBox(-7F, -10F, -1F, 2, 6, 2);
    horn2.setRotationPoint(0F, -6F, -15F);
    horn2.setTextureSize(256, 256);
    horn2.mirror = true;
    setRotation(horn2, 0F, 0F, 0F);
    tail1 = new ModelRenderer(this, 105, 170);
    tail1.addBox(-4F, -4F, 0F, 9, 10, 13);
    tail1.setRotationPoint(0.5F, -3.5F, 18F);
    tail1.setTextureSize(256, 256);
    tail1.mirror = true;
    setRotation(tail1, 0F, 0F, 0F);
    tail2 = new ModelRenderer(this, 109, 200);
    tail2.addBox(-4F, -3.5F, 13F, 8, 8, 10);
    tail2.setRotationPoint(0.5F, -3.5F, 18F);
    tail2.setTextureSize(256, 256);
    tail2.mirror = true;
    setRotation(tail2, 0F, 0F, 0F);
    tail3 = new ModelRenderer(this, 110, 222);
    tail3.addBox(-3F, -3F, 23F, 6, 6, 11);
    tail3.setRotationPoint(0.5F, -3.5F, 18F);
    tail3.setTextureSize(256, 256);
    tail3.mirror = true;
    setRotation(tail3, 0F, 0F, 0F);
    tail4 = new ModelRenderer(this, 115, 241);
    tail4.addBox(-2F, -2.5F, 34F, 4, 4, 8);
    tail4.setRotationPoint(0.5F, -3.5F, 18F);
    tail4.setTextureSize(256, 256);
    tail4.mirror = true;
    setRotation(tail4, 0F, 0F, 0F);
    leftarm = new ModelRenderer(this, 40, 70);
    leftarm.addBox(0F, 0F, -1F, 3, 7, 3);
    leftarm.setRotationPoint(6F, -3F, -5F);
    leftarm.setTextureSize(256, 256);
    leftarm.mirror = true;
    setRotation(leftarm, 0F, 0F, 0F);
    rightarm = new ModelRenderer(this, 205, 70);
    rightarm.addBox(-3F, 0F, -1F, 3, 7, 3);
    rightarm.setRotationPoint(-5F, -3F, -5F);
    rightarm.setTextureSize(256, 256);
    rightarm.mirror = true;
    setRotation(rightarm, 0F, 0F, 0F);
    lefthand1 = new ModelRenderer(this, 40, 82);
    lefthand1.addBox(0F, 7F, -1F, 3, 2, 1);
    lefthand1.setRotationPoint(6F, -3F, -5F);
    lefthand1.setTextureSize(256, 256);
    lefthand1.mirror = true;
    setRotation(lefthand1, 0F, 0F, 0F);
    lefthand2 = new ModelRenderer(this, 40, 88);
    lefthand2.addBox(0F, 7F, 0F, 1, 2, 2);
    lefthand2.setRotationPoint(6F, -3F, -5F);
    lefthand2.setTextureSize(256, 256);
    lefthand2.mirror = true;
    setRotation(lefthand2, 0F, 0F, 0F);
    lefthand3 = new ModelRenderer(this, 40, 94);
    lefthand3.addBox(2F, 7F, 0F, 1, 2, 2);
    lefthand3.setRotationPoint(6F, -3F, -5F);
    lefthand3.setTextureSize(256, 256);
    lefthand3.mirror = true;
    setRotation(lefthand3, 0F, 0F, 0F);
    righthand1 = new ModelRenderer(this, 211, 88);
    righthand1.addBox(-1F, 7F, 0F, 1, 2, 2);
    righthand1.setRotationPoint(-5F, -3F, -5F);
    righthand1.setTextureSize(256, 256);
    righthand1.mirror = true;
    setRotation(righthand1, 0F, 0F, 0F);
    righthand2 = new ModelRenderer(this, 209, 82);
    righthand2.addBox(-3F, 7F, -1F, 3, 2, 1);
    righthand2.setRotationPoint(-5F, -3F, -5F);
    righthand2.setTextureSize(256, 256);
    righthand2.mirror = true;
    setRotation(righthand2, 0F, 0F, 0F);
    righthand3 = new ModelRenderer(this, 211, 93);
    righthand3.addBox(-3F, 7F, 0F, 1, 2, 2);
    righthand3.setRotationPoint(-5F, -3F, -5F);
    righthand3.setTextureSize(256, 256);
    righthand3.mirror = true;
    setRotation(righthand3, 0F, 0F, 0F);
    nose1 = new ModelRenderer(this, 15, 20);
    nose1.addBox(-5F, 0F, -17F, 11, 4, 1);
    nose1.setRotationPoint(0F, -6F, -15F);
    nose1.setTextureSize(256, 256);
    nose1.mirror = true;
    setRotation(nose1, 0F, 0F, 0F);
    nose2 = new ModelRenderer(this, 19, 15);
    nose2.addBox(-3F, -2F, -17F, 7, 2, 1);
    nose2.setRotationPoint(0F, -6F, -15F);
    nose2.setTextureSize(256, 256);
    nose2.mirror = true;
    setRotation(nose2, 0F, 0F, 0F);
    rightear1 = new ModelRenderer(this, 20, 5);
    rightear1.addBox(5.5F, -3F, -1F, 1, 3, 3);
    rightear1.setRotationPoint(0F, -6F, -15F);
    rightear1.setTextureSize(256, 256);
    rightear1.mirror = true;
    setRotation(rightear1, 0F, 0.4363323F, -0.0872665F);
    rightear2 = new ModelRenderer(this, 30, 5);
    rightear2.addBox(5.5F, -3F, 2F, 1, 2, 1);
    rightear2.setRotationPoint(0F, -6F, -15F);
    rightear2.setTextureSize(256, 256);
    rightear2.mirror = true;
    setRotation(rightear2, 0F, 0.4363323F, -0.0872665F);
    leftear1 = new ModelRenderer(this, 12, 5);
    leftear1.addBox(-5.5F, -3F, -1F, 1, 3, 3);
    leftear1.setRotationPoint(0F, -6F, -15F);
    leftear1.setTextureSize(256, 256);
    leftear1.mirror = true;
    setRotation(leftear1, 0F, -0.4363323F, 0.0872665F);
    leftear2 = new ModelRenderer(this, 30, 5);
    leftear2.addBox(-5.5F, -3F, 2F, 1, 2, 1);
    leftear2.setRotationPoint(0F, -6F, -15F);
    leftear2.setTextureSize(256, 256);
    leftear2.mirror = true;
    setRotation(leftear2, 0F, -0.4363323F, 0.0872665F);
  }
  public void render(Entity par1Entity, float par2, float par3, float par4, float par5, float par6, float par7)
  {
    super.render(par1Entity, par2, par3, par4, par5, par6, par7);
    setRotationAngles(par2, par3, par4, par5, par6, par7, par1Entity);
    body.render(par7);
    rightfoot1.render(par7);
    rightfoot2.render(par7);
    rightfoot3.render(par7);
    rightfoot4.render(par7);
    righttwins.render(par7);
    rightquadriceps.render(par7);
    lefttwins.render(par7);
    leftquadriceps.render(par7);
    leftfoot1.render(par7);
    leftfoot2.render(par7);
    leftfoot3.render(par7);
    leftfoot4.render(par7);
    bodyneck.render(par7);
    neck.render(par7);
    tit1.render(par7);
    tit2.render(par7);
    tit3.render(par7);
    tit4.render(par7);
    tit5.render(par7);
    head.render(par7);
    jaw.render(par7);
    tooth1.render(par7);
    tooth2.render(par7);
    tooth3.render(par7);
    tooth4.render(par7);
    tooth5.render(par7);
    tooth6.render(par7);
    tooth7.render(par7);
    tooth8.render(par7);
    tooth9.render(par7);
    tooth10.render(par7);
    tooth11.render(par7);
    tooth12.render(par7);
    tooth13.render(par7);
    tooth14.render(par7);
    tooth15.render(par7);
    tooth16.render(par7);
    tooth17.render(par7);
    tooth18.render(par7);
    tooth19.render(par7);
    tooth20.render(par7);
    horn1.render(par7);
    horn2.render(par7);
    tail1.render(par7);
    tail2.render(par7);
    tail3.render(par7);
    tail4.render(par7);
    leftarm.render(par7);
    rightarm.render(par7);
    lefthand1.render(par7);
    lefthand2.render(par7);
    lefthand3.render(par7);
    righthand1.render(par7);
    righthand2.render(par7);
    righthand3.render(par7);
    nose1.render(par7);
    nose2.render(par7);
    rightear1.render(par7);
    rightear2.render(par7);
    leftear1.render(par7);
    leftear2.render(par7);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float par1, float par2, float par3, float par4, float par5, float par6, Entity entity)
  {
	EntityCowasaurus thisEntity = (EntityCowasaurus)entity;
    super.setRotationAngles(par1, par2, par3, par4, par5, par6, entity);
    head.rotateAngleY = par4 / (180F / (float)Math.PI);
    head.rotateAngleX = par5 / (180F / (float)Math.PI);
    rightear1.rotateAngleY = this.head.rotateAngleY;
    rightear1.rotateAngleX = this.head.rotateAngleX;
    rightear2.rotateAngleY = this.head.rotateAngleY;
    rightear2.rotateAngleX = this.head.rotateAngleX;
    leftear1.rotateAngleY = this.head.rotateAngleY;
    leftear1.rotateAngleX = this.head.rotateAngleX;
    leftear2.rotateAngleY = this.head.rotateAngleY;
    leftear2.rotateAngleX = this.head.rotateAngleX;
    nose1.rotateAngleY = this.head.rotateAngleY;
    nose1.rotateAngleX = this.head.rotateAngleX;
    nose2.rotateAngleY = this.head.rotateAngleY;
    nose2.rotateAngleX = this.head.rotateAngleX;
    horn1.rotateAngleY = this.head.rotateAngleY;
    horn1.rotateAngleX = this.head.rotateAngleX;
    horn2.rotateAngleY = this.head.rotateAngleY;
    horn2.rotateAngleX = this.head.rotateAngleX;
    tooth1.rotateAngleY = this.head.rotateAngleY;
    tooth2.rotateAngleY = this.head.rotateAngleY;
    tooth3.rotateAngleY = this.head.rotateAngleY;
    tooth4.rotateAngleY = this.head.rotateAngleY;
    tooth5.rotateAngleY = this.head.rotateAngleY;
    tooth6.rotateAngleY = this.head.rotateAngleY;
    tooth7.rotateAngleY = this.head.rotateAngleY;
    tooth8.rotateAngleY = this.head.rotateAngleY;
    tooth9.rotateAngleY = this.head.rotateAngleY;
    tooth10.rotateAngleY = this.head.rotateAngleY;
    tooth1.rotateAngleX = this.head.rotateAngleX;
    tooth2.rotateAngleX = this.head.rotateAngleX;
    tooth3.rotateAngleX = this.head.rotateAngleX;
    tooth4.rotateAngleX = this.head.rotateAngleX;
    tooth5.rotateAngleX = this.head.rotateAngleX;
    tooth6.rotateAngleX = this.head.rotateAngleX;
    tooth7.rotateAngleX = this.head.rotateAngleX;
    tooth8.rotateAngleX = this.head.rotateAngleX;
    tooth9.rotateAngleX = this.head.rotateAngleX;
    tooth10.rotateAngleX = this.head.rotateAngleX;
    jaw.rotateAngleY = this.head.rotateAngleY;
    jaw.rotateAngleX = this.head.rotateAngleX;

    jaw.rotateAngleX = (this.head.rotateAngleX + (25F / (180F / (float)Math.PI))) + (par5 / (180F / (float)Math.PI))*MathHelper.cos(thisEntity.ticksExisted*0.4F)*0.1F;
    	
    if (this.head.rotateAngleX == 0)
    {
    	this.jaw.rotateAngleX = 0F + (2F / (180F / (float)Math.PI));
    }    
    else if (this.head.rotateAngleX > 0)
    {
    	this.jaw.rotateAngleX = (this.head.rotateAngleX + (25F / (180F / (float)Math.PI))) + (par5 / (180F / (float)Math.PI))*MathHelper.cos(thisEntity.ticksExisted*0.4F)*0.6662F;
    }
    tooth11.rotateAngleY = this.jaw.rotateAngleY;
    tooth12.rotateAngleY = this.jaw.rotateAngleY;
    tooth13.rotateAngleY = this.jaw.rotateAngleY;
    tooth14.rotateAngleY = this.jaw.rotateAngleY;
    tooth15.rotateAngleY = this.jaw.rotateAngleY;
    tooth16.rotateAngleY = this.jaw.rotateAngleY;
    tooth17.rotateAngleY = this.jaw.rotateAngleY;
    tooth18.rotateAngleY = this.jaw.rotateAngleY;
    tooth19.rotateAngleY = this.jaw.rotateAngleY;
    tooth20.rotateAngleY = this.jaw.rotateAngleY;
    tooth11.rotateAngleX = this.jaw.rotateAngleX;
    tooth12.rotateAngleX = this.jaw.rotateAngleX;
    tooth13.rotateAngleX = this.jaw.rotateAngleX;
    tooth14.rotateAngleX = this.jaw.rotateAngleX;
    tooth15.rotateAngleX = this.jaw.rotateAngleX;
    tooth16.rotateAngleX = this.jaw.rotateAngleX;
    tooth17.rotateAngleX = this.jaw.rotateAngleX;
    tooth18.rotateAngleX = this.jaw.rotateAngleX;
    tooth19.rotateAngleX = this.jaw.rotateAngleX;
    tooth20.rotateAngleX = this.jaw.rotateAngleX;
    rightquadriceps.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 0.5F * par2;
    leftquadriceps.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 0.5F * par2;
    righttwins.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 0.8F * par2;
    lefttwins.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.0F * par2;
    rightfoot1.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.0F * par2;
    leftfoot1.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.0F * par2;
    rightfoot2.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.0F * par2;
    leftfoot2.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.0F * par2;
    rightfoot3.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.0F * par2;
    leftfoot3.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.0F * par2;
    rightfoot4.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.0F * par2;
    leftfoot4.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.0F * par2;
    leftarm.rotateAngleY = this.rightquadriceps.rotateAngleX;
    rightarm.rotateAngleY = this.rightquadriceps.rotateAngleX;
    lefthand1.rotateAngleY = this.rightquadriceps.rotateAngleX;
    lefthand2.rotateAngleY = this.rightquadriceps.rotateAngleX;
    lefthand3.rotateAngleY = this.rightquadriceps.rotateAngleX;
    righthand1.rotateAngleY = this.rightquadriceps.rotateAngleX;
    righthand2.rotateAngleY = this.rightquadriceps.rotateAngleX;
    righthand3.rotateAngleY = this.rightquadriceps.rotateAngleX;
    leftarm.rotateAngleX = this.rightquadriceps.rotateAngleX;
    rightarm.rotateAngleX = this.rightquadriceps.rotateAngleX;
    lefthand1.rotateAngleX = this.rightquadriceps.rotateAngleX;
    lefthand2.rotateAngleX = this.rightquadriceps.rotateAngleX;
    lefthand3.rotateAngleX = this.rightquadriceps.rotateAngleX;
    righthand1.rotateAngleX = this.rightquadriceps.rotateAngleX;
    righthand2.rotateAngleX = this.rightquadriceps.rotateAngleX;
    righthand3.rotateAngleX = this.rightquadriceps.rotateAngleX;
    leftarm.rotateAngleZ = this.rightquadriceps.rotateAngleX;
    rightarm.rotateAngleZ = this.rightquadriceps.rotateAngleX;
    lefthand1.rotateAngleZ = this.rightquadriceps.rotateAngleX;
    lefthand2.rotateAngleZ = this.rightquadriceps.rotateAngleX;
    lefthand3.rotateAngleZ = this.rightquadriceps.rotateAngleX;
    righthand1.rotateAngleZ = this.rightquadriceps.rotateAngleX;
    righthand2.rotateAngleZ = this.rightquadriceps.rotateAngleX;
    righthand3.rotateAngleZ = this.rightquadriceps.rotateAngleX;

  }
  
  public void setLivingAnimations(EntityLivingBase entitylivingbaseIn, float p_78086_2_, float p_78086_3_, float partialTickTime)
  {
      EntityCowasaurus entity = (EntityCowasaurus)entitylivingbaseIn;
      float bobSpeed = 0.1F;
      float bobSpeedWalking = 0.6662F;
      if (entity.isSneaking())
      {
      	tail1.rotateAngleY = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeedWalking) * 0.2F;
      	tail1.rotateAngleX = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeedWalking) * 0.1F;
      	tail2.rotateAngleY = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeedWalking) * 0.3F;
      	tail2.rotateAngleX = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeedWalking) * 0.1F;
      	tail3.rotateAngleY = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeedWalking) * 0.4F;
      	tail3.rotateAngleX = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeedWalking) * 0.1F;
      	tail4.rotateAngleY = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeedWalking) * 0.5F;
      	tail4.rotateAngleX = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeedWalking) * 0.1F;
        this.field_78163_i = 0;
      }
      else if (entity.isSprinting())
      {
        	tail1.rotateAngleY = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeedWalking) * 0.2F;
          	tail1.rotateAngleX = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeedWalking) * 0.1F;
          	tail2.rotateAngleY = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeedWalking) * 0.3F;
          	tail2.rotateAngleX = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeedWalking) * 0.1F;
          	tail3.rotateAngleY = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeedWalking) * 0.4F;
          	tail3.rotateAngleX = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeedWalking) * 0.1F;
          	tail4.rotateAngleY = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeedWalking) * 0.5F;
          	tail4.rotateAngleX = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeedWalking) * 0.1F;
        this.field_78163_i = 2;
      }
      else
      {
        	tail1.rotateAngleY = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeed) * 0.2F;
          	tail1.rotateAngleX = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeed) * 0.1F;
          	tail2.rotateAngleY = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeed) * 0.3F;
          	tail2.rotateAngleX = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeed) * 0.1F;
          	tail3.rotateAngleY = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeed) * 0.4F;
          	tail3.rotateAngleX = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeed) * 0.1F;
          	tail4.rotateAngleY = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeed) * 0.5F;
          	tail4.rotateAngleX = MathHelper.cos((entity.ticksExisted + entity.getEntityId()) * bobSpeed) * 0.1F;
        this.field_78163_i = 1;
      }
  }
}
